/************ data model **************/
.symbol_type PersonType
.symbol_type DescriptionType

.decl person(name:PersonType, description:DescriptionType)
.input person(filename="DATA/person.facts")

.decl female(name:PersonType)
.input female(filename="DATA/female.facts")

.decl male(name:PersonType)
.input male(filename="DATA/male.facts")

.decl parent_child(p1:PersonType, p2:PersonType)
.input parent_child(filename="DATA/parent_child.facts")

.decl person_living(p:PersonType)
.input person_living(filename="DATA/person_living.facts")

/************* problem 0 **************/
/**** Find all children of Priscilla ****/
.decl p0(x:PersonType, d:DescriptionType)
.output p0(filename="hw4-0.ans")

// NOTE: if you want to redirect the output to console
// you can use the syntax:
.output p0(IO=stdout)
p0(x,d) :- parent_child("Priscilla",x), person(x,d).

// NOTE: DO NOT remove the declarations or the .output statements below.
// you can ignore any "No rules/facts defined for relation" warnings when you
// have not defined the rules for those relations
/************* problem 1 **************/
.decl p1(x:PersonType,d:DescriptionType)

.output p1(filename="hw4-1.ans")
.output p1(IO=stdout)

.decl people(x:PersonType)
people(y) :- parent_child(x,y), x= "Priscilla".
people(x) :- people(y), parent_child(y,x).
p1(x,d) :- people(x), person(x,d).

/************* problem 2 **************/
.decl p2(x:PersonType, d:DescriptionType, m:number)

.output p2(filename="hw4-2.ans")
.output p2(IO=stdout)

.decl mom_dad(x:PersonType,c:number)
mom_dad(x,c) :- parent_child(x,_), c = count : {parent_child(x,_)}.
.decl mom(x:PersonType,c:number)
.decl dad(x:PersonType,c:number) 
mom(x,c) :- mom_dad(x,c), female(x).
dad(x,c) :- mom_dad(x,c), male(x).
.decl maxMom(c:number)
.decl maxDad(c:number)
maxMom(maxCount) :- maxCount = max c:{mom(_,c)}.
maxDad(maxCount) :- maxCount = max c:{dad(_,c)}.
p2(x,d,n) :-mom(x,n), maxMom(n), person(x,d).
p2(x,d,n) :-dad(x,n), maxDad(n), person(x,d).

/************* problem 3 **************/
.decl p3(x:PersonType, m1:number, m2:number)

.output p3(filename="hw4-3.ans")
.output p3(IO=stdout)
.decl generation(x:PersonType, m:number)
generation(xn,m) :- parent_child(xn, _), !parent_child(_,xn), m = 0. /* 0 generation*/
generation(x1,m) :- generation(x0, n), parent_child(x0,x1), m = n+1. /* recursion */
p3(x, m1, m2) :- generation(x,_),person_living(x), m1 = min(m):generation(x,m),m2 = max(m):generation(x,m).

/************* problem 4 **************/
.decl p4(x:PersonType)

.output p4(filename="hw4-4.ans")
.output p4(IO=stdout)

.decl mother(x:PersonType,y:PersonType)
mother(y,x) :- parent_child(y,x), person_living(x), female(y).
mother(z,x) :- parent_child(z,y), mother(y,x), female(z).
.decl countLiving(m:number)
countLiving(m) :- m = count:{person_living(x)}.
.decl countMom(x:PersonType,m:number)
countMom(x,m) :-mother(x,_),m=count:{mother(x,_)}.
p4(x) :- countMom(x,m), countLiving(m).

/************* problem 5 **************/
.decl p5(x:PersonType)

.output p5(filename="hw4-5.ans")
.output p5(IO=stdout)
.decl MCA(x:PersonType,y:PersonType)
MCA(x,y) :- p4(x), parent_child(x,y), p4(y).
p5(x) :- p4(x),!MCA(x,_).
